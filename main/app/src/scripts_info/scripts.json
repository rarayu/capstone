{
  "SI_Login": {
    "name": "SQL Injection (로그인)",
    "info": "데이터베이스와 연동된 웹 애플리케이션에서 공격자가 입력 폼 또는 URL 입력란에 SQL 구문을 삽입하여 DB를 조작할 수 있는 취약점입니다.",
    "measures": "입력값에 대한 유효성 검사를 수행하여 사용자 입력에 포함된 SQL 구문을 필터링하거나 이스케이프 처리합니다. 시스템 및 DBMS에서 제공하는 에러 코드가 노출되지 않도록 예외처리합니다."
  },

  "SI_Search": {
    "name": "SQL Injection (검색)",
    "info": "데이터베이스와 연동된 웹 애플리케이션에서 공격자가 입력 폼 또는 URL 입력란에 SQL 구문을 삽입하여 DB를 조작할 수 있는 취약점입니다.",
    "measures": "입력값에 대한 유효성 검사를 수행하여 사용자 입력에 포함된 SQL 구문을 필터링하거나 이스케이프 처리합니다. 시스템 및 DBMS에서 제공하는 에러 코드가 노출되지 않도록 예외처리합니다."
  },

  "PHP_CI": {
    "name": "PHP CODE Injection",
    "info": "공격자가 악의적인 PHP 코드를 웹 사이트에 주입하여 서버에서 실행할 수 있도록 하는 취약점입니다.",
    "measures": "사용자 입력을 필터링하여 악성 코드나 명령어를 제거하거나 이스케이프 처리합니다."
  },

  "AE": {
    "name": "관리자 페이지 노출",
    "info": "웹 서버가 인덱스 파일이 없을 때 디렉토리의 내용을 나열하는 경우 발생하는 취약점입니다.",
    "measures": "일반 사용자가 유추하기 어려운 이름으로 관리자 로그인 페이지 주소 변경 및 관리자 페이지 접근 포트를 변경합니다. 웹 방화벽을 이용하여 특정 IP만 접근 가능할 수 있도록 룰셋을 적용합니다."
  },

  "DL": {
    "name": "디렉터리 리스팅",
    "info": "인덱스 파일이 없을 때 웹 서버가 디렉토리의 내용을 나열하는 경우 발생하는 취약점입니다. 이로 인해 공격자에게 민감한 정보가 노출될 수 있습니다.",
    "measures": "파라미터 값 대상으로 특정 특수 문자를 필터링하도록 웹 방화벽 룰셋 적용합니다."
  },

  "XSS_Stored": {
    "name": "Stored XSS",
    "info": "공격자가 웹 사이트에 악의적인 코드를 주입하여 사용자의 브라우저에서 실행되도록 하는 취약점입니다. 이를 통해 공격자는 민감한 정보를 도난당하거나 사용자의 계정을 제어할 수 있습니다.",
    "measures": "사용자로부터 받은 입력 데이터를 검증하고, 특수 문자나 스크립트 태그 등을 이스케이프하여 저장하거나 출력할 때 안전한 형태로 처리해야 합니다."
  },

  "SF": {
    "name": "세션 고정 취약점",
    "info": "공격자가 사용자의 세션 ID를 고정하여 사용자의 세션을 탈취하고 계정을 제어할 수 있도록 하는 취약점입니다.",
    "measures": "로그인할 때마다 예측 불가능한 새로운 세션 ID를 발급받도록 해야 하고 기존 세션 ID는 파기해야 합니다."
  },

  "Cookie": {
    "name": "쿠키 변조 취약점",
    "info": "공격자가 사용자의 쿠키를 수정하여 사용자의 세션을 탈취하거나 민감한 정보를 도난당할 수 있도록 하는 취약점입니다.",
    "measures": "중요한 정보를 담은 쿠키에는 Secure와 HttpOnly 속성을 설정합니다. Secure 속성은 HTTPS 연결에서만 쿠키를 전송하도록 하며, HttpOnly 속성은 JavaScript로 접근하지 못하도록 합니다."
  },

  "Redirect": {
    "name": "리다이렉트 취약점",
    "info": "공격자가 사용자를 악의적인 웹 사이트로 리디렉션 할 수 있도록 하는 취약점으로, 일반적으로 피싱 또는 악성 코드 배포를 위해 사용됩니다.",
    "measures": "허용되는 목적지 URL을 명시적으로 지정하는 화이트리스트 방식을 사용합니다. 다른 도메인이나 외부 URL로의 리다이렉션을 제한합니다. 웹 애플리케이션 및 관련 프레임워크를 최신 상태로 유지하고, 보안 업데이트와 취약점 패치를 정기적으로 적용합니다."
  },

  "CSRF": {
    "name": "CSRF",
    "info": "공격자가 사용자를 속여 웹 사이트에서 사용자의 지식이나 동의 없이 작업을 수행하도록 하는 취약점입니다.",
    "measures": "웹 사이트의 게시판, 1:1 문의, URL 등에서 사용자 입력 값에 대해 검증 로직을 추가하거나 입력되더라도 실행되지 않게 하고, 코드 중 필요한 코드에 대해서만 입력되게 설정합니다."
  },

  "BF": {
    "name": "약한 문자열 강도",
    "info": "웹 사이트에서 사용자가 약한 비밀번호를 선택할 수 있도록 허용하는 경우 발생하는 취약점으로, 공격자가 비밀번호를 추측하거나 크래킹하기 쉬워집니다.",
    "measures": "취약한 계정 및 패스워드를 삭제합니다. 로그인시 패스워드 입력 실패가 일정 횟수를 초과할 경우 관리자에게 통보 및 계정을 잠금 처리합니다. 이때, Server Side Script를 통해 구현합니다."
  },

  "LDAP": {
    "name": "LDAP Injection",
    "info": "공격자가 악의적인 LDAP 코드를 웹 사이트에 주입하여 민감한 정보에 접근하는 취약점입니다.",
    "measures": "사용자 입력값을 화이트 리스트로 지정하여 영문(a-z, A-Z)과 숫자(0-9)만을 허용합니다. DN과 필터에 사용되는 사용자 입력 값에는 특수문자가 포함되지 않도록 특수문자 제거합니다. 특수문자를 사용하는 경우에는 특수문자를 실행 명령이 아닌 일반문자로 인식되도록 처리합니다."
  },

  "XML_XPATH": {
    "name": "XML/XPath Injection",
    "info": "공격자가 악의적인 XML 또는 XPath 코드를 웹 사이트에 주입하여 민감한 정보에 접근하거나 웹 사이트의 동작을 조작할 수 있도록 하는 취약점입니다.",
    "measures": "() = ‘ [] : , * /  등 XPath 쿼리를 파괴하는 특수문자는 입력 자체를 막습니다. 특정 특수 문자만을 필터링 하는 것이 아닌 허용된 문자 이외의 모든 입력 허용하지 않아야 합니다."
  },

  "BA": {
    "name": "불충분한 인증",
    "info": "웹 사이트의 인증 메커니즘이 잘못 구현되어 공격자가 이를 우회하여 무단 접근할 수 있는 경우 발생하는 취약점입니다.",
    "measures": "중요한 내용이 담긴 정보를 HTML 소스에 포함하지 않도록 합니다."
  },

  "DOR": {
    "name": "Insecure DOR",
    "info": "웹 사이트에서 내부 객체(예: 파일 또는 데이터베이스 레코드)에 대한 참조를 노출하여 공격자가 직접 접근할 수 있도록 하는 취약점입니다.",
    "measures": "인증 및 권한 검사를 수행하여 접근 권한이 없는 사용자가 민감한 객체 또는 리소스에 접근하지 못하도록 제한합니다. 접근 권한을 부여할 때에는 필요한 최소한의 권한만 부여하고, 세밀한 권한 제어를 수행하여 객체 또는 리소스에 대한 무단 접근을 방지합니다."
  },

  "Base": {
    "name": "Base 64 취약점",
    "info": "Base64는 바이너리 데이터를 ASCII 문자열로 변환하는 인코딩 방식입니다. 해당 취약점의 경우, 암호화 대신 인코딩만 사용하여 중요한 정보를 저장했을 때에 발생하는 취약점을 말합니다.",
    "measures": "Base 64가 아닌 RSA와 같은 다른 암호화 방식을 사용하도록 합니다."
  },

  "RFA": {
    "name": "Restrict Folder Access",
    "info": "특정 폴더에 대한 접근을 제한하는 것을 의미합니다. 폴더 접근 제한이 제대로 설정되지 않은 경우에 발생하는 취약점을 말합니다.",
    "measures": "로그인이 해제 된 상황에서도 자원에 접근이 가능한 취약점이기에 세션관리가 필요합니다. 웹 애플리케이션에서 로그인 상태를 확인하는 과정을 페이지 접근 시마다 수행하여, 로그인이 풀린 경우 적절한 인증 상태를 확인하여 접근을 제한합니다."
  },

  "XSS": {
    "name": "XSS",
    "info": "공격자가 웹 사이트에 악의적인 코드를 주입하여 사용자의 브라우저에서 실행되도록 하는 취약점입니다. 이를 통해 공격자는 민감한 정보를 도난당하거나 사용자의 계정을 제어할 수 있습니다.",
    "measures": "웹 브라우저에서 실행되는 스크립트 언어에서 사용되는 태그 사용을 사전에 제한하고 필터링 하는 작업이 필요합니다. 입력 값에 대한 필터링 로직 구현 시 공백 문자를 제거하는 함수(trim, replace등)를 사용하여 반드시 서버 측에서 구현되어야 합니다. URL 인코딩된 값을 디코딩하여 우회 공격 차단합니다."
  },

  "SM": {
    "name": "Security Misconfiguration",
    "info": "웹 사이트가 제대로 구성되지 않아 공격에 노출되는 취약점입니다.",
    "measures": "HTML의 head 태그 내에 META 태그를 추가하여 검색엔진 인덱싱을 차단합니다. *.log, *.tmp같은 파일 확장자가 포함된 백업 파일을 모두 삭제하고 txt 확장자와 같이 작업중 생성 된 일반 텍스트 파일이나 이미지 파일 등도 제거합니다."
  },

  "BS": {
    "name": "Blind SQL Injection",
    "info": "SQL Injection의 한 종류로, 공격자가 직접적으로 결과를 확인할 수 없는 상황에서 시도하는 공격 방법입니다.",
    "measures": "정적 쿼리나 동적 쿼리에 사용되는 입력값의 길이나 속성을 검증하여 적절한 필터링 및 제한을 수행합니다. 웹 애플리케이션의 로깅 시스템을 강화하여 의심스러운 SQL 쿼리나 액세스를 기록하고, 시스템 보안 인시던트를 모니터링하고 대응합니다."
  }
}
